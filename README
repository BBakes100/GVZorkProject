--------------------- NOTES GO HERE -------------------------
* make sure to comment where we use AI for help
* after project is done, maybe add some art?

* at least 8 connected locations 
* at least 10 items
* at least 5 NPCs

----- ITEM -----
* STRING: name (can not be empty)
* STRING: description (can not be empty)
* INT: num of calories (0 if not edible) can not be < 0 > 1000
* FLOAT: weight between 0 and 500 
* 
* Methods:
* Constructor(name, desription, calories, weight)
* Overloaded Stream Operator (Like toString Method) 
* Ex - NAME (X Calories) - X lb - DESCRIPTION

----- NPC -----
* STRING: name (can not be empty)
* STRING: description (can not be empty)
* INT: message number (increase by 1 when player talks to NPC, repeat)
* VECTOR<STRING>: messages 
* 
* Methods:
* Constructor(name, description)
* Getters() - Name, Description, Current Message (Changes message num)
* Overloaded Stream Operator - Returns name of NPC

----- LOCATION -----
* STRING: name (can not be empty)
* STRING: description (can not be empty)
* BOOL: indicates if location has been visited ->
* <- (TRUE == yes, FALSE == no)
* MAP<STRING, LOCATION>: neighbors 
* VECTOR<NPC>: NPC's in this location
* VECTOR<ITEM>: items in this location
* 
* Methods:
* Constructor(name, description)
* std::map<string, Location> get_locations() - returns neighbors map
* void add_location(string direction, Location location) - adds a location into the map with the provided       direction string, if string is blank or already exists, raise exception
* void add_npc(NPC) - adds NPC to Location's NPC vector
* std::vector<NPC> get_npcs() - returns the vector of NPC's
* void add_item(Item item) - adds item to Location's item vector
* std::vector<Item> get_items() - returns the vector of items
* void set_visited() - changes the visited variable to true (can't be false after set true)
* bool get_visited() - checks that location has been visited
* Overloaded Stream Operator - returns string with form
* 
* LOCATION NAME - LOCATION DESCRIPTION
* 
* You see the following NPCs:
*       - NPC STREAM OPERATOR 1
*       - NPC NAME CONT...
* 
* You see the following Items:
*       - ITEM STREAM OPERATOR 1
*       - ITEM STREAM OPERATOR CONT...
* 
* You can go in the following Directions:
*       - MAP KEY 1 - MAP VALUE 1 (LOCATION.GET_VISITED)
*       - MAP KEY CONT.. - MAP VALUE CONT... (LOCATION.GET_VISITED)

----- GAME -----
* MAP<STRING, COMMAND>: map of commands. COMMAND is a VOID function and takes a VECTOR<STRING>
* VECTOR<ITEM>: items the player currently has in their inventory 
* INT: current weight of players inventory 
* VECTOR<LOCATION>: locations that exsist in the world
* LOCATION: players current location
* INT: num of calories the elf needs before saving campus 
* BOOL: game in progress (TRUE == yes, FALSE == no)
* std::map<string, function<void(*)(std::vector<string>)>> commmands -
Dictionary of mapped strings to functions
SETUP DICTIONARY - commands["show help"] = show_help;
ALIAS - commands["help"] = show_help;
* Command is the first word, i.e. "Take the rusty_sword" command = "take" and the vector of strings will hold "the", "rusty_sword" ->
commmands[command](tokens)
* 
* Methods:
* Constructor() - set the commands map equal to the return call from setup_commands(). Calls create_world(). Sets 
location to random location by calling random_location()
* void create_world() - method that creates all of the locations, items and NPC's. Seperate string lines if
they get too long. EX - kirkhoff_upstairs = Location("kirkhoff upstairs", "The student union.\
                                                        There are restaurants, a store, and\
                                                        places to congregate")

* std::map<std::string, void(*)(std::vector<string>)> setup_commands() - create a new map in which 
the keys will be strings such as talk, give, go, etc. The values will be the names of the functions
that should be called for each of those commands. Return the map 
* Location random_location() - selects a random location from the locations vector and returns that location
* void play() - core game loop 
* 
* 
* 

